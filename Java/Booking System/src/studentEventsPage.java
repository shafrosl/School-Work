import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class studentEventsPage extends javax.swing.JFrame {
    static String filepath = directory.file;
    
    public studentEventsPage() throws IOException {
        initComponents();
        try {
           getInfo2();
        } 
         
        catch (FileNotFoundException ex) {
            Logger.getLogger(studentEventsPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void getInfo2() throws FileNotFoundException, IOException{
        File folder = new File (filepath);
        File[] listOfFiles = folder.listFiles();
        
        for (File file : listOfFiles) {
            if (file.isFile()) {
                String fileN = file.getPath();
                BufferedReader br = new BufferedReader(new FileReader(fileN));
                Object[]tableLines = br.lines().toArray();
                DefaultTableModel model = (DefaultTableModel)allEvents.getModel();
                
                for (int i = 0; i < 1; i++) {
                    String line = tableLines[i].toString().trim();
                    String[] dataRow = line.split(",");
                    model.addRow(dataRow);
                }
                br.close();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel3 = new keeptoo.KGradientPanel();
        jLabel2 = new javax.swing.JLabel();
        home1 = new javax.swing.JButton();
        confirm = new javax.swing.JButton();
        studentPage = new javax.swing.JLabel();
        searchEventLabel = new javax.swing.JLabel();
        searchEvent = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        allEvents = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kGradientPanel3.setkBorderRadius(5);
        kGradientPanel3.setkEndColor(new java.awt.Color(255, 255, 255));
        kGradientPanel3.setkGradientFocus(300);
        kGradientPanel3.setkStartColor(new java.awt.Color(113, 199, 172));
        kGradientPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N
        kGradientPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        home1.setBackground(new java.awt.Color(242, 247, 242));
        home1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Home_64px_2.png"))); // NOI18N
        home1.setToolTipText("Creates a booking");
        home1.setBorderPainted(false);
        home1.setContentAreaFilled(false);
        home1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home1ActionPerformed(evt);
            }
        });
        kGradientPanel3.add(home1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 30, 70, 50));

        confirm.setBackground(new java.awt.Color(75, 140, 113));
        confirm.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        confirm.setForeground(new java.awt.Color(255, 255, 255));
        confirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Add_New_64px.png"))); // NOI18N
        confirm.setText("Confirm Booking");
        confirm.setToolTipText("Delete booking");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });
        kGradientPanel3.add(confirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, 280, 130));

        studentPage.setFont(new java.awt.Font("Palace Script MT", 0, 80)); // NOI18N
        studentPage.setForeground(new java.awt.Color(255, 255, 255));
        studentPage.setText("Events Page");
        kGradientPanel3.add(studentPage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 80));

        searchEventLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        searchEventLabel.setForeground(new java.awt.Color(255, 255, 255));
        searchEventLabel.setText("Search Events: ");
        kGradientPanel3.add(searchEventLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 120, 20));

        searchEvent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchEventKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchEventKeyReleased(evt);
            }
        });
        kGradientPanel3.add(searchEvent, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 156, 670, -1));

        allEvents.setAutoCreateRowSorter(true);
        allEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Time", "Event", "Venue", "Slots"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allEvents.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(allEvents);
        if (allEvents.getColumnModel().getColumnCount() > 0) {
            allEvents.getColumnModel().getColumn(0).setPreferredWidth(10);
            allEvents.getColumnModel().getColumn(1).setPreferredWidth(10);
            allEvents.getColumnModel().getColumn(2).setPreferredWidth(130);
            allEvents.getColumnModel().getColumn(3).setPreferredWidth(30);
            allEvents.getColumnModel().getColumn(4).setPreferredWidth(15);
        }

        kGradientPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 790, 140));

        getContentPane().add(kGradientPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 490));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void home1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home1ActionPerformed
        try {
            new studentHomePage().setVisible(true);
        } 
        
        catch (IOException ex) {
            Logger.getLogger(studentEventsPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        studentEventsPage.this.setVisible(false);
    }//GEN-LAST:event_home1ActionPerformed

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        DefaultTableModel model = (DefaultTableModel)allEvents.getModel();
        String evNam = model.getValueAt(allEvents.getSelectedRow(),2).toString();
        File folder = new File (filepath);
        File[] listOfFiles = folder.listFiles();
        String id = String.valueOf(userID.getID());
        FileIOTest1 fi = new FileIOTest1(); 
        
        
        try {
            fi.test(id, evNam);
        } 
        
        catch (FileNotFoundException ex) {
            Logger.getLogger(studentEventsPage.class.getName()).log(Level.SEVERE, null, ex);

        }
      
        try {
            new studentHomePage().setVisible(true);
        } 
        
        catch (IOException ex) {
            Logger.getLogger(studentEventsPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        studentEventsPage.this.setVisible(false);
        
    }//GEN-LAST:event_confirmActionPerformed

    private void searchEventKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchEventKeyReleased
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(((DefaultTableModel) allEvents.getModel())); 
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchEvent.getText()));

        allEvents.setRowSorter(sorter);
    }//GEN-LAST:event_searchEventKeyReleased

    private void searchEventKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchEventKeyPressed
        
    }//GEN-LAST:event_searchEventKeyPressed
 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new studentEventsPage().setVisible(true);
                } 
                
                catch (IOException ex) {
                    Logger.getLogger(studentEventsPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allEvents;
    private javax.swing.JButton confirm;
    private javax.swing.JButton home1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private keeptoo.KGradientPanel kGradientPanel3;
    private javax.swing.JTextField searchEvent;
    private javax.swing.JLabel searchEventLabel;
    private javax.swing.JLabel studentPage;
    // End of variables declaration//GEN-END:variables
}

class FileIOTest1 {
    static StringBuffer stringBufferOfData = new StringBuffer();
    static String filename = null;
    static String filepath = directory.file;
    static Scanner sc = new Scanner(System.in);//initiliaze scanner to get user input
    
    public void test(String info, String na) throws FileNotFoundException {
    boolean fileRead = readFile(info,na);//call the method to read the file with the files name  
    
        if (fileRead) {//if the read file was successfull
            replacement(info);//call method to get text to replace, replacement text and output replaced String buffer
            writeToFile(info);
        }
    }
    
    private static boolean readFile(String id, String na) {
        File folder = new File (filepath);
        File[] listOfFiles = folder.listFiles();

         for (File file : listOfFiles) {
            String n = file.getPath();
            if (file.isFile()){
                if(n.contains(na)){
                    filename = file.getPath();
                try {
                    Scanner scanner = new Scanner(file);

                    //check if booking alr exists
                    int lineNum = 0;
                    
                    while (scanner.hasNextLine()) {
                        String line = scanner.nextLine();
                        lineNum++;
                        if(line.equals(userID.getID())) { 
                           JOptionPane.showMessageDialog(null, "You have already made a booking for this event", "Event booking", JOptionPane.INFORMATION_MESSAGE);
                           
                           return false;// return false to exit the FileIOTest1
                        }
                        else{
                             filename = file.getPath();
                        }
                    }
                } catch(FileNotFoundException e) { 
                    //handle this
                }
                   
                }
            }
            
         }
         
        Scanner fileToRead = null;
        try {
            fileToRead = new Scanner(new File(filename)); //point the scanner method to a file
            
            //check if there is a next line and it is not null and then read it in
            for (String line; fileToRead.hasNextLine() && (line = fileToRead.nextLine()) != null; ) {
                System.out.println(line);//print each line as its read
                stringBufferOfData.append(line).append("\r\n");//this small line here is to appened all text read in from the file to a string buffer which will be used to edit the contents of the file
            }
            
            fileToRead.close();//this is used to release the scanner from file
            return true;
        } 
        
        catch (FileNotFoundException ex) {//if the file cannot be found an exception will be thrown
            System.out.println("The file " + filename + " could not be found! " + ex.getMessage());
            return false;
        } 
        
        finally {//if an error occurs now we close the file to exit gracefully
            fileToRead.close();
            return true;
        }
    }
    
    private static void writeToFile(String info) throws FileNotFoundException {        
        try {
            BufferedWriter bufwriter = new BufferedWriter(new FileWriter(filename));
            bufwriter.write(stringBufferOfData.toString());//writes the edited string buffer to the new file
            stringBufferOfData.delete(0, stringBufferOfData.length());
            bufwriter.close();//closes the file
            JOptionPane.showMessageDialog(null, "Booking confirmed!", "Event booking", JOptionPane.INFORMATION_MESSAGE);
        } 
        
        catch (Exception e) {//if an exception occurs
            System.out.println("Error occured while attempting to write to file: " + e.getMessage());
        }
    }
    
    private static void replacement(String info) {
        stringBufferOfData.append(info);
        System.out.println("Here is the new edited text:\n" + stringBufferOfData);
    }
}