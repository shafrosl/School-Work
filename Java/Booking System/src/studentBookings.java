import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class studentBookings extends javax.swing.JFrame {
    static String filepath = directory.file;
    
    public studentBookings() throws IOException {
        initComponents();
        try {
           getBookedInfo();
        } 
        
        catch (FileNotFoundException ex) {
            Logger.getLogger(studentBookings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void getBookedInfo() throws FileNotFoundException, IOException{
        File folder = new File (filepath);
        File[] listOfFiles = folder.listFiles();
        String currentLine;
        
        for (File file : listOfFiles) {
            if (file.isFile()) {
                String id = String.valueOf(userID.getID());
                String path = file.getPath();
                Scanner scanner = new Scanner(path);
        
                while (scanner.hasNextLine()){
                    currentLine = scanner.nextLine();
                    System.out.println("directory: " + currentLine);
                    String location = currentLine;
                    String fileN = file.getPath();
                    BufferedReader br = new BufferedReader(new FileReader(fileN));
                    
                    while ((currentLine = br.readLine()) != null) {
                        if (currentLine.contains(id)) {
                            System.out.println("found id: " + currentLine);

                            BufferedReader curbr = new BufferedReader(new FileReader(location));
                            Object[] tableLines = curbr.lines().toArray();
                            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

                            for (int i = 0; i < 1; i++) {
                                String line = tableLines[i].toString().trim();
                                String[] dataRow = line.split(",");
                                model.addRow(dataRow);
                                break;
                            }
                            curbr.close();
                        }
                    }
                    br.close(); 
                }
            } 
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        home = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        studentPage = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kGradientPanel3.setkBorderRadius(5);
        kGradientPanel3.setkEndColor(new java.awt.Color(255, 255, 255));
        kGradientPanel3.setkGradientFocus(300);
        kGradientPanel3.setkStartColor(new java.awt.Color(113, 199, 172));
        kGradientPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        home.setBackground(new java.awt.Color(242, 247, 242));
        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Home_64px_2.png"))); // NOI18N
        home.setToolTipText("Creates a booking");
        home.setBorderPainted(false);
        home.setContentAreaFilled(false);
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        kGradientPanel3.add(home, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 30, 70, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N
        kGradientPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        studentPage.setFont(new java.awt.Font("Palace Script MT", 0, 80)); // NOI18N
        studentPage.setForeground(new java.awt.Color(255, 255, 255));
        studentPage.setText("My Bookings");
        kGradientPanel3.add(studentPage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 300, 80));

        delete.setBackground(new java.awt.Color(75, 140, 113));
        delete.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Trash_64px.png"))); // NOI18N
        delete.setText("Delete Booking");
        delete.setToolTipText("Delete booking");
        delete.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        kGradientPanel3.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 260, 130));

        jTable2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Time", "Event", "Venue", "Slots"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAlignmentY(1.0F);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(130);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(30);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(15);
        }

        kGradientPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 790, 160));

        getContentPane().add(kGradientPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 490));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
        String evNam = model.getValueAt(jTable2.getSelectedRow(),2).toString();

        File folder = new File (filepath);
        File[] listOfFiles = folder.listFiles();
        String id = String.valueOf(userID.getID());
        FileIOTest2 fi = new FileIOTest2(); 
        
        try {
            fi.test(id, evNam);
        } 
        
        catch (FileNotFoundException ex) {
            Logger.getLogger(studentEventsPage.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Delete confirmed!", "Event deletion", JOptionPane.INFORMATION_MESSAGE);
        }
         
        JOptionPane.showMessageDialog(null, "Delete confirmed!", "Event deletion", JOptionPane.INFORMATION_MESSAGE);
        try {
            new studentBookings().setVisible(true);
        } 
        
        catch (IOException ex) {
            Logger.getLogger(studentBookings.class.getName()).log(Level.SEVERE, null, ex);
        }
        studentBookings.this.setVisible(false);
    }//GEN-LAST:event_deleteActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        try {
            new studentHomePage().setVisible(true);
        } 
        
        catch (IOException ex) {
            Logger.getLogger(studentBookings.class.getName()).log(Level.SEVERE, null, ex);
        }
        studentBookings.this.setVisible(false);
    }//GEN-LAST:event_homeActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(studentBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(studentBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(studentBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(studentBookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new studentBookings().setVisible(true);
                } 
                
                catch (IOException ex) {
                    Logger.getLogger(studentBookings.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JButton home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel3;
    private javax.swing.JLabel studentPage;
    // End of variables declaration//GEN-END:variables
}

class FileIOTest2 {
    static StringBuffer stringBufferOfData = new StringBuffer();
    static String filename = null;
    static Scanner sc = new Scanner(System.in);//initiliaze scanner to get user input
    static String filepath = directory.file;
    
    public void test(String info, String na) throws FileNotFoundException {
    boolean fileRead = readFile(na);//call the method to read the file with the files name
        
        if (fileRead) {//if the read file was successfull
            replacement(info);//call method to get text to replace, replacement text and output replaced String buffer
            writeToFile();
        }
    }
    
    private static boolean readFile(String na) {
        File folder = new File (filepath);
        File[] listOfFiles = folder.listFiles();
        
         for (File file : listOfFiles) {
            String n = file.getPath();
            if (file.isFile()){
                if(n.contains(na)){
                    filename = file.getPath();
                }
            }
        }
         
        Scanner fileToRead = null;
        try {
            fileToRead = new Scanner(new File(filename)); //point the scanner method to a file
            
            //check if there is a next line and it is not null and then read it in
            for (String line; fileToRead.hasNextLine() && (line = fileToRead.nextLine()) != null; ) {
                System.out.println(line);//print each line as its read
                stringBufferOfData.append(line).append("\r\n");//this small line here is to appened all text read in from the file to a string buffer which will be used to edit the contents of the file
            }
            
            fileToRead.close();//this is used to release the scanner from file
            return true;
        } 
        
        catch (FileNotFoundException ex) {//if the file cannot be found an exception will be thrown
            System.out.println("The file " + filename + " could not be found! " + ex.getMessage());
            return false;
        } 
        
        finally {//if an error occurs now we close the file to exit gracefully
            fileToRead.close();
            return true;
        }
    }
    
    private static void writeToFile() throws FileNotFoundException {          
        try {
            BufferedWriter bufwriter = new BufferedWriter(new FileWriter(filename));
            bufwriter.write(stringBufferOfData.toString());//writes the edited string buffer to the new file
            stringBufferOfData.delete(0, stringBufferOfData.length());
            bufwriter.close();//closes the file
        }
        
        catch (Exception e) {//if an exception occurs
            System.out.println("Error occured while attempting to write to file: " + e.getMessage());
        }
    }
    
    private static void replacement(String info)  {
        int startIndex = stringBufferOfData.indexOf(info);
        int endIndex = startIndex + info.length();
        stringBufferOfData.delete(startIndex, endIndex);
    }
}