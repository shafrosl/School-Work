import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public final class staffEvents extends javax.swing.JFrame {
    static String filepath = directory.file;
    static String slotpath = directory.slotpath;
    
    public staffEvents() throws IOException {
       initComponents();
       
        try {
            getInfo1();
        } 
        
        catch (FileNotFoundException ex) {
            Logger.getLogger(staffPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void getInfo1() throws FileNotFoundException, IOException{
        File folder = new File (filepath);
        File[] listOfFiles = folder.listFiles();
        String id = String.valueOf(userID.getID());
        
         for (File file : listOfFiles) {
            String n = file.getPath();
            if (file.isFile()){
                
                if (n.contains(id)){
                String fileN = file.getPath();
                BufferedReader br = new BufferedReader(new FileReader(fileN));
                Object[] tableLines = br.lines().toArray();
                DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
                
                    for (int i = 0; i < 1; i++) {
                        String line = tableLines[i].toString().trim();
                        String[] dataRow = line.split(",");
                        model.addRow(dataRow);
                    }
                    br.close();    
                }
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel2 = new keeptoo.KGradientPanel();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        home = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        create = new javax.swing.JButton();
        studentPage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        update = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kGradientPanel2.setkEndColor(new java.awt.Color(255, 255, 255));
        kGradientPanel2.setkGradientFocus(50);
        kGradientPanel2.setkStartColor(new java.awt.Color(0, 204, 0));
        kGradientPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kGradientPanel3.setkBorderRadius(5);
        kGradientPanel3.setkEndColor(new java.awt.Color(255, 255, 255));
        kGradientPanel3.setkGradientFocus(300);
        kGradientPanel3.setkStartColor(new java.awt.Color(113, 199, 172));
        kGradientPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Time", "Event", "Venue", "Slots"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAlignmentY(1.0F);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(130);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(50);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(15);
        }

        kGradientPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 790, 160));

        home.setBackground(new java.awt.Color(242, 247, 242));
        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Home_64px_2.png"))); // NOI18N
        home.setToolTipText("Creates a booking");
        home.setBorderPainted(false);
        home.setContentAreaFilled(false);
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        kGradientPanel3.add(home, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 30, 70, 50));

        delete.setBackground(new java.awt.Color(75, 140, 113));
        delete.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Trash_64px.png"))); // NOI18N
        delete.setText("Delete Event");
        delete.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        kGradientPanel3.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 270, 130));

        create.setBackground(new java.awt.Color(75, 140, 113));
        create.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        create.setForeground(new java.awt.Color(255, 255, 255));
        create.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Add_New_64px.png"))); // NOI18N
        create.setText("Create Event");
        create.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        kGradientPanel3.add(create, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 270, 130));

        studentPage.setFont(new java.awt.Font("Palace Script MT", 0, 80)); // NOI18N
        studentPage.setForeground(new java.awt.Color(255, 255, 255));
        studentPage.setText("My Events");
        kGradientPanel3.add(studentPage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 230, 80));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N
        kGradientPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        update.setBackground(new java.awt.Color(75, 140, 113));
        update.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8_Renew_64px_2.png"))); // NOI18N
        update.setText("Update Event");
        update.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        kGradientPanel3.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 350, 270, 130));

        kGradientPanel2.add(kGradientPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 490));

        getContentPane().add(kGradientPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 490));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        try {
            new staffPage().setVisible(true);
        } 
        
        catch (IOException ex) {
            Logger.getLogger(staffEvents.class.getName()).log(Level.SEVERE, null, ex);
        }
        staffEvents.this.setVisible(false);
    }//GEN-LAST:event_homeActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
        String evNam = model.getValueAt(jTable2.getSelectedRow(),2).toString();
        String id = userID.getID();
        String filename = filepath + "/" + evNam + id + ".txt";
        
        String venue = model.getValueAt(jTable2.getSelectedRow(),3).toString();
        String date = model.getValueAt(jTable2.getSelectedRow(),0).toString();
        String time = model.getValueAt(jTable2.getSelectedRow(),1).toString();
        String delete = venue + date + time;
        
        try {
            File path = new File(slotpath);
            
            File temp = File.createTempFile("temp", ".txt", path.getParentFile());
            String charset = "UTF-8";
            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(path), charset));
            PrintWriter writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(temp), charset));
            
            for (String line; (line = reader.readLine()) != null;) {
                if(line.equals(delete)){
                    writer.println();
                } 
                
                else {
                    writer.println(line);
                }
            }
            reader.close();
            writer.close();
            path.delete();
            temp.renameTo(path);
        }
        
        catch (Exception e) {
            System.out.println("Something went wrong");
            System.out.println(slotpath);
        }

        try {
            File file = new File(filename);
            
            if(file.delete()){
    		JOptionPane.showMessageDialog(null, "Delete confirmed!", "Event deletion", JOptionPane.INFORMATION_MESSAGE);
                staffEvents.this.setVisible(false);
                new staffEvents().setVisible(true);
            }
            
            else {
    		System.out.println("Delete operation failed.");
                System.out.println(filename);
            }
    	}
        
        catch(Exception e){
            e.printStackTrace();
    	}
    }//GEN-LAST:event_deleteActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        new staffCreateEvent().setVisible(true);
        staffEvents.this.setVisible(false);
    }//GEN-LAST:event_createActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        String name, venue, date, time, slot;
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel(); 
        int selectedRowIndex = jTable2.getSelectedRow();

        name = model.getValueAt(selectedRowIndex, 0).toString();
        venue = model.getValueAt(selectedRowIndex, 1).toString();
        date = model.getValueAt(selectedRowIndex, 2).toString();
        time = model.getValueAt(selectedRowIndex, 3).toString();
        slot = model.getValueAt(selectedRowIndex, 4).toString();
        
        staffUpdateEvent ue = new staffUpdateEvent();
        ue.setVisible(true);
        ue.txtInfo(name, venue, date, time, slot);
        
        String info = name + "," + venue + "," + date + "," + time + "," + slot;
        tempInfo ti = new tempInfo();
        ti.setInfo(info);
        staffEvents.this.setVisible(false);
    }//GEN-LAST:event_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(staffEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(staffEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(staffEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(staffEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new staffEvents().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(staffEvents.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JButton home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private keeptoo.KGradientPanel kGradientPanel2;
    private keeptoo.KGradientPanel kGradientPanel3;
    private javax.swing.JLabel studentPage;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}